{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onSearchChange","className","placeholder","onChange","Scroll","props","style","overflow","border","height","padding","children","Card","id","name","email","src","alt","CardList","robots","map","robot","key","App","state","searchField","bind","event","this","setState","target","value","fetch","then","response","json","users","filteredRobotList","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iUAWeA,G,YARG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACjB,OACI,yBAAKC,UAAU,cACX,2BAAOC,YAAY,eAAeC,SAAUH,OCIzCI,EARA,SAACC,GACZ,OACI,yBAAKJ,UAAU,SAASK,MAAO,CAAEC,SAAU,SAAUC,OAAQ,mBAAoBC,OAAQ,QAASC,QAAS,QACtGL,EAAMM,WCgBJC,G,MAlBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKd,UAAU,QACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,yBAAyBe,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WAE3F,yBAAKhB,UAAU,UACVa,GAEL,yBAAKb,UAAU,eACVc,OCKNG,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OACI,yBAAKlB,UAAU,sBAEPkB,EAAOC,KAAI,SAAAC,GACP,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAMR,GAAIA,GAAIQ,EAAMR,GAAIC,KAAMO,EAAMP,KAAMC,MAAOM,EAAMN,aCgC3EQ,E,kDApCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXL,OAAQ,GACRM,YAAa,IAGf,EAAKzB,eAAiB,EAAKA,eAAe0B,KAApB,gBAPX,E,2DAUEC,GACbC,KAAKC,SAAS,CAAEJ,YAAaE,EAAMG,OAAOC,U,0CAGxB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEV,OAAQiB,S,+BAGlC,IAAD,EAC0BR,KAAKJ,MAA7BL,EADF,EACEA,OAAQM,EADV,EACUA,YACVY,EAAoBlB,EAAOmB,QAAO,SAAAjB,GAAK,OAAIA,EAAMP,KAAKyB,cAAcC,SAASf,EAAYc,kBAE/F,OACE,yBAAKtC,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWD,eAAgB4B,KAAK5B,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUmB,OAAQkB,U,GA9BVI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28348122.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n    return (\r\n        <div className=\"Search-Box\">\r\n            <input placeholder=\"Search Robot\" onChange={onSearchChange}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"Scroll\" style={{ overflow: 'scroll', border: '2px solid yellow', height: '380px', padding: '5px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"content\">\r\n                <div className=\"robo-pic\">\r\n                    <img className=\"right floated ui image\" src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\r\n                </div>\r\n                <div className=\"header\">\r\n                    {name}\r\n                </div>\r\n                <div className=\"description\">\r\n                    {email}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n\r\n    return(\r\n        <div className=\"Card-List ui cards\">\r\n            {\r\n                robots.map(robot => {\r\n                    return (\r\n                        <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  onSearchChange(event){\n    this.setState({ searchField: event.target.value });\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response =>  response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  render(){\n    const { robots, searchField } = this.state;\n    const filteredRobotList = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>My Robofriends!</h1>\n        <SearchBox onSearchChange={this.onSearchChange}/>\n        <Scroll>\n          <CardList robots={filteredRobotList}/>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}